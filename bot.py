import json
import logging
from aiogram import Bot, Dispatcher, executor, types
import config

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö
try:
    with open("users.json", "r", encoding="utf-8") as f:
        USERS = json.load(f)
except FileNotFoundError:
    USERS = {}

try:
    with open("data.json", "r", encoding="utf-8") as f:
        DATA = json.load(f)
except FileNotFoundError:
    DATA = {}

CURRENT_TIME = None

# –ö–æ–º–∞–Ω–¥–∞ /set_time
@dp.message_handler(commands=["set_time"])
async def set_time(message: types.Message):
    if str(message.from_user.id) not in config.ADMIN_IDS:
        await message.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    global CURRENT_TIME
    CURRENT_TIME = message.get_args().strip()
    await message.reply(f"‚è∞ –í—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {CURRENT_TIME}")

# –ö–æ–º–∞–Ω–¥–∞ /send
@dp.message_handler(commands=["send"])
async def handle_send(message: types.Message):
    global CURRENT_TIME
    if not CURRENT_TIME:
        await message.reply("‚ö† –í—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        return

    user_id = str(message.from_user.id)
    if user_id not in USERS:
        await message.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    try:
        _, kk, sbp = message.text.strip().split()
        kk, sbp = float(kk), float(sbp)
    except:
        await message.reply("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π: /send <–ö–ö> <–°–ë–ü>")
        return

    store = USERS[user_id]
    if CURRENT_TIME not in DATA:
        DATA[CURRENT_TIME] = {}
    DATA[CURRENT_TIME][store] = {"kk": kk, "sbp": sbp}

    with open("data.json", "w", encoding="utf-8") as f:
        json.dump(DATA, f, ensure_ascii=False, indent=2)

    await message.reply("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã. –°–ª–µ–¥—É—é—â–∏–π –æ—Ç—á—ë—Ç –≤ **:**")

# –ö–æ–º–∞–Ω–¥–∞ /report
@dp.message_handler(commands=["report"])
async def report(message: types.Message):
    if str(message.from_user.id) not in config.ADMIN_IDS:
        await message.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if not CURRENT_TIME or CURRENT_TIME not in DATA:
        await message.reply("‚õî –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    result = f"üìä –û—Ç—á—ë—Ç –∑–∞ {CURRENT_TIME}\n\n"
    for store, values in DATA[CURRENT_TIME].items():
        kk, sbp = values["kk"], values["sbp"]
        percent = (sbp / kk) * 100 if kk else 0

        if percent >= 27:
            color = "üü¢"
        elif 20 <= percent < 27:
            color = "üü†"
        else:
            color = "üî¥"

        result += f"{store}: –ö–ö {kk}, –°–ë–ü {sbp}, –î–æ–ª—è: {percent:.1f}% {color}\n"

    await message.reply(result)

# –ö–æ–º–∞–Ω–¥–∞ /add_user
@dp.message_handler(commands=["add_user"])
async def add_user(message: types.Message):
    if str(message.from_user.id) not in config.ADMIN_IDS:
        await message.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    parts = message.text.strip().split(maxsplit=2)
    if len(parts) < 3:
        await message.reply("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π: /add_user <id> <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    new_id, name = parts[1], parts[2]
    USERS[new_id] = name

    with open("users.json", "w", encoding="utf-8") as f:
        json.dump(USERS, f, ensure_ascii=False, indent=2)

    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{new_id}` –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ \"{name}\"", parse_mode="Markdown")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
