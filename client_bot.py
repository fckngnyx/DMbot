import asyncio
from aiogram import Bot, Dispatcher, types
import config
import json
import time

bot = Bot(token=config.CLIENT_BOT_TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö
def load_users():
    try:
        with open("users.json", "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
def load_data():
    try:
        with open("data.json", "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
def save_data(data):
    with open("data.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

async def send_reminder():
    while True:
        users = load_users()
        for user_id in users:
            try:
                await bot.send_message(user_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –æ–±–æ—Ä–æ—Ç–µ.")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await asyncio.sleep(3600)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–∞–∑ –≤ —á–∞—Å

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    user_id = str(message.from_user.id)
    users = load_users()

    if user_id not in users:
        return await message.reply("üö´ –í–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –æ–±–æ—Ä–æ—Ç–µ.")


async def on_startup(dp):
    asyncio.create_task(send_reminder())  # <-- –∑–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–¥–µ—Å—å

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, on_startup=on_startup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ (–ö–ö –∏ –°–ë–ü)
@dp.message_handler(lambda message: message.text.startswith("–ö–ö") or message.text.startswith("–°–ë–ü"))
async def handle_data(message: types.Message):
    user_id = str(message.from_user.id)
    users = load_users()

    if user_id not in users:
        return await message.reply("üö´ –í–∞—à –º–∞–≥–∞–∑–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    
    data = load_data()

    if message.text.startswith("–ö–ö"):
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–æ—Ä–æ—Ç –ø–æ –ö–ö
        data[user_id] = data.get(user_id, {})
        data[user_id]["–ö–ö"] = message.text.split(":")[1].strip()
    elif message.text.startswith("–°–ë–ü"):
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–æ—Ä–æ—Ç –ø–æ –°–ë–ü
        data[user_id] = data.get(user_id, {})
        data[user_id]["–°–ë–ü"] = message.text.split(":")[1].strip()

    save_data(data)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    await message.reply(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ ({users[user_id]['name']}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n"
                         f"–ö–ö: {data[user_id].get('–ö–ö', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n–°–ë–ü: {data[user_id].get('–°–ë–ü', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                         f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É! –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω—è—Ç—Å—è.")

